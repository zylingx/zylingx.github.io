<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F07%2F13%2Fpython%2Fpython%E4%B8%8A%2F10%E5%85%83%E7%BB%84%2F</url>
    <content type="text"><![CDATA[title: 元组tupledate: 2018-06-16tags: python基础编程 categories: python基础编程 description: 介绍python中的元组数据类型 元组是有序、不可变的元素集合，和列表的区别是tuple一旦初始化就不能修改，比如同样是列出同学的名字 &gt;&gt;&gt; classmates = (&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;) 现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。 因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。 空tuple写法 &gt;&gt;&gt; t = () &gt;&gt;&gt; t () 如果你这么定义1个元素的tuple写法： &gt;&gt;&gt; t = (1) &gt;&gt;&gt; t 1 定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义： &gt;&gt;&gt; t = (1,) &gt;&gt;&gt; t (1,) tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如 &gt;&gt;&gt; t = (1, 2) &gt;&gt;&gt; t (1, 2) Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。 最后来看一个“可变的”tuple&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;]) &gt;&gt;&gt; t[2][0] = &apos;X&apos; &gt;&gt;&gt; t[2][1] = &apos;Y&apos; &gt;&gt;&gt; t (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;]) 这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？别急，我们先看看定义的时候tuple包含的3个元素： 表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。 练习请用索引取出下面list的指定元素： -- coding: utf-8 --L = [ [&apos;Apple&apos;, &apos;Google&apos;, &apos;Microsoft&apos;], [&apos;Java&apos;, &apos;Python&apos;, &apos;Ruby&apos;, &apos;PHP&apos;], [&apos;Adam&apos;, &apos;Bart&apos;, &apos;Lisa&apos;] ] 打印Apple打印Python打印Lisa 小结list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。]]></content>
  </entry>
  <entry>
    <title><![CDATA[列表]]></title>
    <url>%2F2018%2F06%2F15%2Fpython%2Fpython%E4%B8%8A%2F9%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[列表List序列是Python中最基本的数据结构。是最常用的Python数据类型， 每个元素都分配一个数字 - 它的位置(或索引)，第一个索引是0，第二个索引是1，依此类推。 列表注意事项1：列表的数据项不需要具有相同的类型2;创建列表，只要用逗号分隔，把不同的数据项使用方括号括起来即可。3:用索引访问list中每个元素，索引值以 0 为开始值，-1 为从末尾的开始位置。 用索引访问列表Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。比如，列出班里所有同学的名字，就可以用一个list表示： &gt;&gt;&gt; classmates = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] &gt;&gt;&gt; classmates [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;] 变量classmates就是一个list。用len()函数可以获得list元素的个数： &gt;&gt;&gt; len(classmates) 3 用索引来访问list中每一个位置的元素，记得索引是从0开始的： &gt;&gt;&gt; classmates[0] &apos;Michael&apos; &gt;&gt;&gt; classmates[1] #(如同对数组一样来操作) &apos;Bob&apos; &gt;&gt;&gt; classmates[2] &apos;Tracy&apos; &gt;&gt;&gt; classmates[3] Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; IndexError: list index out of range 当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素： &gt;&gt;&gt; classmates[-1] &apos;Tracy&apos; 以此类推，可以获取倒数第2个、倒数第3个： &gt;&gt;&gt; classmates[-2] &apos;Bob&apos; &gt;&gt;&gt; classmates[-3] &apos;Michael&apos; &gt;&gt;&gt; classmates[-4] Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; IndexError: list index out of range 当然，倒数第4个就越界了。 列表的常用操作增、删、改、查、判定、排序、乱序、比较、反转 增：append功能：在列表元素末尾追加一个新元素语法：对象.append(想要添加的元素)返回值： None &gt;&gt;&gt; nums = [1, 2, 3, 4] &gt;&gt;&gt; nums.append(5) &gt;&gt;&gt;print(nums) [1, 2, 3, 4, 5] insert功能：在列表指定索引前面插入一个新的元素语法：对象.insert(索引, 想要添加的元素)返回值：None &gt;&gt;&gt; nums = [1, 2, 3, 4] &gt;&gt;&gt; nums.insert(1，5) &gt;&gt;&gt;print(nums) [1, 5, 2, 3, 4] extend功能：用一个可迭代对象，在原列表末尾扩展原列表语法：对象.extend(可迭代对象)返回值：None &gt;&gt;&gt; nums = [1, 2, 3, 4] &gt;&gt;&gt; lists = [5, 55, 555] &gt;&gt;&gt; nums.extend(lists) &gt;&gt;&gt;print(nums) [1, 2, 3, 4, 5, 55, 555] 注：可以看成两个集合的拼接 乘法运算功能：按数字重复打印列表 数字 次语法：列表 * 数字 &gt;&gt;&gt;[&quot;a&quot;] * 3 [&apos;a&apos;, &apos;a&apos;, &apos;a&apos;] 加法运算功能：将同类型的数据相加语法：[“a”] + [“b”,True] &gt;&gt;&gt;[&quot;a&quot;] + [&quot;b&quot;,5] [&apos;a&apos;, &apos;b&apos;, 5] 注：和extend区别：加法运算只能同类型相加 删del 语句功能：可以删除一个指定元素(对象)语法：del 指定元素 &gt;&gt;&gt;num = [1, 2, 3, 4] &gt;&gt;&gt;del num[1] &gt;&gt;&gt;print(num) [1, 3, 4] 注意：==可以删除整个列表==删除一个变量==也可以删除某个元素 pop功能：移除并返回列表中指定索引对应元素语法：对象.pop(index=-1)参数：index是需要被删除返回的元素索引，默认是-1，就是列表最后一个元素返回值：被删除的元素 &gt;&gt;&gt;num = [1, 2, 3, 4] &gt;&gt;&gt;num.pop() 4 &gt;&gt;&gt;num.pop(1) 2 &gt;&gt;&gt;print(num) [1, 3] &gt;&gt;&gt;num.pop(2) IndexError 注意：注意索引越界 remove功能：移除列表中指定元素语法：对象.remove(需要被删除的元素) &gt;&gt;&gt;strs = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;] &gt;&gt;&gt;strs.remove(&apos;b&apos;) &gt;&gt;&gt;print(strs) [&apos;a&apos;, &apos;c&apos;, &apos;d&apos;] &gt;&gt;&gt;strs.remove(2) ValueError 注意：==如果元素不存在会报错==注：remove方法不能按数组下标的方式来删除数据项 改列表名[索引值] = 值 eg: names[6] = 666 查获取单个元素 items[index] 注:注意负索引 获取元素索引 index() 获取指定元素个数 count() 获取多个元素切片 items[start:end:step] 遍历方式1 方式2根据元素进行遍历 根据索引进行遍历 for item in list: for index in range(len(list)): print(item) print(index, list[index]) 判定元素 in 列表 #判断元素是否在列表 元素 not in 列表 #判断元素是否不在列表 比较用比较运算符去比较 注: python2.x 中，有个内建函数cmp。内建函数就是相当于print函数一样的，不需要额外导入包，可以直接在程序中使用的函数 排序方式一：内建函数sorted功能：可以对所有可迭代的对象进行排序语法：sorted(iterable, key = None, reverse = Flase)参数：iterable指可迭代对象，reverse指反转（默认是False,表示升序）key指排序关键字(这个值为一个函数，只有一个参数且返回一个值用来进行比较)返回值：一个已经排序好的列表 方式二：列表对象方法语法：list.sort( key = None, reverse = Flase) 附：方式一与方式二的差异(1)方式一可以操作的是可迭代对象，方式二仅仅可以操作列表(2)方式一返回处理后的结果，并不改变原数据本身；方式二无返回，原数据被改变 乱序可以随机打乱一个列表导入random模块eg: import randoml = [1,2,3,4,5]random.shuffle(l)注：返回值为None，该函数改变了原数据本身 反转方式一：列表对象方法reverse eg: list.reverse() 注：返回值为None，该函数改变了原数据本身方式二：切片反转 eg：list[::-1] 注：没有改变原数据本身 列表的多维与复制list里面的元素的数据类型也可以不同，比如： &gt;&gt;&gt; L = [&apos;Apple&apos;, 123, True] list元素也可以是另一个list，比如： &gt;&gt;&gt; s = [&apos;python&apos;, &apos;java&apos;, [&apos;asp&apos;, &apos;php&apos;], &apos;scheme&apos;] &gt;&gt;&gt; len(s) 4 要注意s只有4个元素，其中s2又是一个list，如果拆开写就更容易理解了： &gt;&gt;&gt; p = [&apos;asp&apos;, &apos;php&apos;] &gt;&gt;&gt; s = [&apos;python&apos;, &apos;java&apos;, p, &apos;scheme&apos;] 要拿到’php’可以写p1或者s2，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。 如果一个list中一个元素也没有，就是一个空的list，它的长度为0： &gt;&gt;&gt; L = [] &gt;&gt;&gt; len(L) 0 列表生成式功能：快速的生成列表格式： ==range(stop) --- [0, 1, 2, 3,..., stop-1] ==range(start,stop[, step]) --- [start, start+step,..., stop-1] 注：==start 默认是0，step是步长的意思，默认是1。==在python3中，为了防止生成的列表没有被使用，不会立即生成列表 列表推导式功能：从一个list推出另外一个list，简化了代码格式：[表达式 for 变量 in 列表 if条件] eg:将[1,2,3,4,5]这个列表中的每个元素分别平方，输出不能被2整除的元素 1: nums = [1,2,3,4,5] for num in nums: num2 = num**2; if num2%2 == 0: continue print(num2) 2:(1) nums = [1,2,3,4,5] numsPow = [num**2 for num in nums] &gt;&gt;&gt;numsPow [1,4,9,16,25] (2) nums = [1,2,3,4,5] numsPow = [num**2 for num in nums if num%2 != 0] &gt;&gt;&gt;numsPow [1,9,25] (3)还可以使用两层循环，可以生成全排列： &gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;] [&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;] 三层和三层以上的循环就很少用到了。]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[格式化输出字符串]]></title>
    <url>%2F2018%2F06%2F14%2Fpython%2Fpython%E4%B8%8A%2F8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[一个常见的问题是如何输出格式化的字符串。我们经常会输出类似’亲爱的xxx你好！你xx月的话费是xx，余额是xx’之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。 在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下： &gt;&gt;&gt; &apos;Hello, %s&apos; % &apos;world&apos; &apos;Hello, world&apos; &gt;&gt;&gt; &apos;Hi, %s, you have $%d.&apos; % (&apos;Michael&apos;, 1000000) &apos;Hi, Michael, you have $1000000.&apos; 你可能猜到了，%运算符就是用来格式化字符串的。有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。常见的占位符有： 指定输出小数点精度 &gt;&gt;&gt; &apos;money %.2f&apos; % 45.728 money 45.73 注：.format()也可以格式化字符串，想了解的自行百度]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符编码(了解)]]></title>
    <url>%2F2018%2F06%2F13%2Fpython%2Fpython%E4%B8%8A%2F7%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[字符串也是一种数据类型，但是，字符串比较特殊的还有一个编码问题。 因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。 由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。 但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。 你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。 因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。 现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。字母A用ASCII编码是十进制的65，二进制的01000001；字符0用ASCII编码是十进制的48，二进制的00110000，注意字符’0’和整数0是不同的； 汉字 “中” 已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。 所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间： 字符 ASCII Unicode UTF-8 A 01000001 00000000 01000001 01000001 中 x 01001110 00101101 11100100 10111000 10101101 从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。 搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式： 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件： 浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器.所以你看到很多网页的源码上会有类似的信息，表示该网页正是用的UTF-8编码。]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据类型]]></title>
    <url>%2F2018%2F06%2F11%2Fpython%2Fpython%E4%B8%8A%2F6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下六种：Number(数字) String(字符串) List(列表) Tuple(元组) Sets(集合) Dictionary(字典) 注意：这章知识和上一章的知识点几乎不相上下，同时也是十分重要的。而且还有非常多的内置函数，这些内置函数实际上是不需要死记 的，如果真要用的话，随时上百度或者在python中用help查就好了 数值类型 【点我学习】.点我，点我，点我 字符类型 【点我学习】.点我，点我，点我 空值空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。 布尔值布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来： &gt;&gt;&gt; True True &gt;&gt;&gt; 3 &gt; 5 False 布尔值可以用and、or和not运算。 数据类型转换举例 a = &apos;100&apos; # 此时a的类型是一个字符串，里面存放了100这3个字符 b = int(a) # 此时b的类型是整型，里面存放的是数字100 print(&quot;a=%d&quot;%b) 附：bin()函数将一个整数转换为一个二进制]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运算符]]></title>
    <url>%2F2018%2F06%2F10%2Fpython%2Fpython%E4%B8%8A%2F5%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[Python语言支持以下类型的运算符算术运算符 比较（关系）运算符 赋值运算符逻辑运算符 位运算符 成员运算符身份运算符 运算符优先级接下来让我们一个个来学习Python的运算符。注意：这章知识点特别多，之前没有学习过类似的知识的朋友请认认真真的学，这很重要，所有举出来的案例一定要用心的多敲几遍，理解、消化掉。 算术运算符以下假设变量a为10，变量b为21。以下实例演示了Python所有算术运算符的操作： 实例 比较运算符以下假设变量a为10，变量b为20： 实例 赋值运算符以下假设变量a为10，变量b为20,以下实例演示了Python所有赋值运算符的操作： 实例 位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13.以下实例演示了Python所有位运算符的操作： 实例 逻辑运算符Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:and运算是与运算，只有所有都为True，and运算结果才是Trueor运算是或运算 ，只要其中有一个为True，or运算结果就是Truenot运算是非运算， 它是一个单目运算符，把True变成False，False变成True注：除零以外所有的数字都为True. 实例 成员运算符除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。以下实例演示了Python所有成员运算符的操作： 实例 身份运算符身份运算符用于比较两个对象的存储单元注： id() 函数用于获取对象内存地址。以下实例演示了Python所有身份运算符的操作： 实例 is 与 == 区别：is用于判断两个变量引用对象是否为同一个，== 判断引用变量的值是否相等。 运算符优先级以下表格列出了从最高到最低优先级的所有运算符：以下实例演示了Python运算符优先级的操作 实例]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础知识]]></title>
    <url>%2F2018%2F06%2F09%2Fpython%2Fpython%E4%B8%8A%2F4%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[方便的使用Python[在IDLE中]–TAB补全代码：先键入一些代码，然后按下TAB键。 –回退代码：按下Alt + p 可以在当前位置上显示上一次输入的代码，按下Alt + n 可以显示下一条语句代码。 缩进 在Python中是重要的、最具特色的就是使用缩进来表示代码块，缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。（空格和制表符）用来决定缩进层次，从而用来决定语句的分组。你需要记住：错误的缩进会引发错误。例如： i = 5 print &apos;Value is&apos;, i # Error! Notice a single space at the start of the lineprint &apos;I repeat, the value is&apos;, i 当你运行这个程序的时候，你会得到下面的错误： File &quot;whitespace.py&quot;, line 4 print &apos;Value is&apos;, i # Error! Notice a single space at the start of the line ^ SyntaxError: invalid syntax 注意，在第二行的行首有一个空格。Python指示的这个错误告诉我们程序的语法是无效的，即程序没有正确地编写。它告诉你，你不能随意地开始新的语句块 。何时你能够使用新语句块，将会在后面的章节，如控制流中详细介绍。.. 代码风格建议 在 Python 中，空格很重要，我们使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果缩进是错误的，解释器就会抛出错误。如果是用空格，就一直用空格缩进，不要使用制表符。建议遵守以下约定： ·使用 4 个空格来缩进 或者是 使用Tab键缩进，两者只选一个 ·永远不要混用空格和制表符 ·在函数之间空一行,在类之间空两行 ·字典、列表、元组以及参数列表中，在 ,后添加一个空格。 ·在赋值运算符和比较运算符周围要有空格，括号里侧不加空格：a = f(1, 2)+g(3, 4) Python3 注释确保对模块, 函数, 方法和行内注释使用正确的风格，Python中的注释有单行注释和多行注释单行注释以 # 开头，例如： # 这是一个注释 print(&quot;Hello, World!&quot;) 多行注释用三个单引号 ‘’’ 或者三个双引号 “”” 将注释括起来，例如: &apos;&apos;&apos; 这是多行注释，用三个单引号 这是多行注释，用三个单引号 &apos;&apos;&apos; 多行语句通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句 &gt;&gt;&gt;total = item_one + \ item_two + \ item_three 在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如： &gt;&gt;&gt;total = [&apos;item_one&apos;, &apos;item_two&apos;, &apos;item_three&apos;, &apos;item_four&apos;, &apos;item_five&apos;] 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割 &gt;&gt;&gt;a = 23;b = ‘zylin’;c = True help() 函数 调用 python 的 help() 函数可以打印输出一个函数的文档字符串．如下实例，查看 max 内置函数的参数列表和规范的文档 &gt;&gt;&gt; help(max)……显示帮助信息…… 编码 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码： # -*- coding: cp-1252 -*- #coding:utf-8 注：在python2中如果直接在程序中用到了中文，比如如果直接运行输出，程序会出错。这时就需要用到上面这个语句，可以保证正确输出中文 del语句 python中的del用法比较特殊，新手学习往往产生误解 python的del不同于C的free和C++的delete。由于python都是引用，而python有GC机制，所以，del语句作用在变量上，而不是数据对象上。del删除的是变量，而不是数据。另外。关于list后面再讲。 命名规则见名知意 起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义学生 用 student 驼峰命名法==小驼峰式命名法（lower camel case）第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog==大驼峰式命名法（upper camel case）每一个单字的首字母都采用大写字母，例如：FirstName、LastName注： 不过在程序员中还有一种命名法比较流行，就是用下划线来连接所有的单词，比如send_buf]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础知识]]></title>
    <url>%2F2018%2F06%2F09%2F%E7%AE%97%E6%B3%95%2F%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%2F0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[什么是算法？解决特定问题的方法 为何要学习算法？&emsp;&emsp;从上面知道了算法就是解决特定问题的方法，而我们用的编程语言是用来解决问题的工具，工具有了，如何去使用工具才是我们应该要去学习的。如果说编程语言是利器，那么算法就是灵魂。算法很难，但也需要我们去学习。 什么是数据结构？数据结构是计算机存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。 算法的特性：* 有限的 * 每一步是明确的(不能有歧义) * 至少有一个输出 什么是好的算法？分析指标： * 空间复杂度S(n)：程序执行时占用存储单元的长度 * 时间复杂度T(n)：程序执行时耗费时间的长度 注：这两个指标与要处理的数据规模是相关的。 分析算法关注两种复杂度 * 最坏情况复杂度Tworst(n) * 平均情况复杂度Tavg(n) 不同复杂度的函数，在不同的数据规模下的增长趋势。 算法时间复杂度的计算点击链接学习 ：算法时间复杂度的计算 时间复杂度的几条基本计算规则基本操作，即只有常数项，认为其时间复杂度为O(1) 顺序结构，时间复杂度按加法进行计算 循环结构，时间复杂度按乘法进行计算 分支结构，时间复杂度取最大值 判断一个算法的效率时，只需要关注操作数量的最高次项，其它次要项和常数项可以忽略 在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度 若两段算法分别有复杂度T1(n) = O(f1(n)) 和 T2(n) = O(f2(n))，则: 两个算法拼在一起时，等于两段的和 T1(n) + T2(n) 两个算法嵌套时，等于两段的积 T1(n) * T2(n) 案例一：写程序,计算给定多项式在定点x处的值 算法一上面写法不推荐 算法二&emsp;&emsp;秦九韶算法是中国南宋时期的数学家秦九韶提出的一种多项式简化算法。在西方被称作霍纳算法。是一种将一元n次多项式的求值问题转化为n个一次式的算法。其大大简化了计算过程，即使在现代，利用计算机解决多项式的求值问题时，霍纳规则依然是最优的算法规则。具体计算过程自行百度。 f(x) = A0 + X (A1 + X( … ( An - 1 + X( An ) ) ) ) 自行验证第一种与第二种时间复杂度，运行效率自行测试 案例二：给定N个整数的序列{A1,A2,……,An}，求下面函数的最大值。 算法一 算法二 算法三：分治思想 注：代码比较复杂，这里不展示，过程就是利用分治思想解决这个问题(分治思想后面会说) 算法四：在线处理“在线”指每输入一个数据进行即时处理，在任何一个地方终止，算法都能给出正解。]]></content>
      <categories>
        <category>算法基础</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量与常量]]></title>
    <url>%2F2018%2F06%2F08%2Fpython%2Fpython%E4%B8%8A%2F3%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[变量 变量就是值能够随时发生改变的量。 也是一个存储数据的容器，变量可以是整数或浮点数，可以是字符串，还可以是任意数据类型。 静态语言与动态语言的声明方式差异在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：(#在python中表示注释) a = 123 # a是整数 a = ‘ABC’ # a变为字符串这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。 静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 在Java中表示注释）： int a = 123; // a是整数类型变量 a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量 和静态语言相比，动态语言更灵活，就是这个原因。 不要把赋值语句的等号等同于数学的等号比如下面的代码： x = 10 x = x + 2 如果从数学上理解x = x+2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。 变量在计算机内存中的表示（重要）当我们写：a = ‘ABC’时，Python解释器干了两件事情： 1.在内存中创建了一个’ABC’的字符串； 2在内存中创建了一个名为a的变量，并把它指向’ABC’。 当然我们也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向了变量a指向的数据，例如下面的代码： a = &apos;ABC&apos; b = a a = &apos;XYZ&apos; print(b) 最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是’ABC’，让我们一行一行地执行代码，就可以看到到底发生了什么事。1：执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，并把a指向’ABC’：(图一) 2：执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：(图二) 3：执行a =’XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改所以，最后打印变量b的结果自然是’ABC’了。（图三） 多个变量赋值Python允许你同时为多个变量赋值。例如： a = b = c = 1 以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。 您也可以为多个对象指定多个变量。例如： a, b, c = 1, 2, &quot;runoob&quot; 以上实例，两个整型对象 1 和 2 的分配给变量 a和b，字符串对象”runoob”分配给变量 c。 标识符的命名(变量的命名) –标识符由字母、数字和下划线组成。 –标识符命名不能用数字开头。 –标识符对大小写敏感。 Andy 不等于 andy有效标识符名称的例子有i、__my_name、name_23和a1b2_c3。无效标识符名称的例子有2things、this is spaced out和my-name。 python保留字 保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字： 常量 所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量如： PI = 3.14159265359 但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[输入与输出]]></title>
    <url>%2F2018%2F06%2F07%2Fpython%2Fpython%E4%B8%8A%2F2%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[#输出#print(value,…,sep=” “,end=”\n”,file=sys.stdout,flush=False) 用print()在括号中加上字符串，就可以向屏幕上输出指定的文字。print()函数也接受多个字符串，用逗号“,”隔开，就可以连成一串输出：&gt;&gt;&gt;print(&#39;hello&#39;, &#39; world&#39;)hello world sep=””可以设置多个字符串之间的分隔符，就是将逗号替换为双引号中的内容end =””可以设置结尾的字符，可以将结尾的换行符换成双引号中的内容&gt;&gt;&gt;print(&quot;hello&quot;,&quot;world&quot;,sep = &quot;A&quot;,end = &quot;TT&quot;)helloAworldTT file 表示输出的目标,默认是标准的输出(控制台),还可以是一个可写入的文件句柄flush 表示立即输出的意思,需要输出的内容, 是先存放在缓冲区, 然后再输出到目标flush,就代表是否刷新缓冲区,让缓冲区的内容,立即输出到目标,默认False 加号是将两个字符串连接到一起。乘号是将字符串重复打印&gt;&gt;&gt; print(“Hello”+” World”)Hello World&gt;&gt;&gt; print(“Hello” * 8)HelloHelloHelloHelloHelloHelloHelloHello &gt;&gt;&gt; print(“Hello World” + 8)error,字符串不能做加法运算 输入格式：result = input(‘提示信息’)功能： ==会等待用户输入内容，直到用户按下Enter ==会将用户输入的内容当做”字符串”，传递给接收的变量附：如想把用户输入的数据当成代码处理请参考eval()函数。 练习1：请利用print()输出1024 * 768 = xxx： 2：提示用户并让用户输入今天的日期时间]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的安装与使用]]></title>
    <url>%2F2018%2F06%2F06%2Fpython%2Fpython%E4%B8%8A%2F1Python%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Python的文件你可以用任意文本编辑器建立源代码，但是绝大多数Python文件为了统一都是以.py命名的。 在Windows上安装Python 首先，根据你的Windows版本（64位还是32位）从Python的官方网站下载Python．然后，运行下载的EXE安装包 我们可以通过Python官方网站下载获得Python。因为Python是跨平台的，在Windows上写Python程序，放到Linux上也是能够运行的。特别要注意勾上Add Python 3.5 to PATH，然后点“Install Now”即可完成安装。注：这是当时作者安装时的版本，如要安装新的版本请按类似操作进行选择附：作者建议安装32位的版本，因为64位的python编写的程序无法在32位机上跑程序， 使用IDLE来帮助学习Python因为这个对新手非常友好 –IDLE是安装Python时就同时安装好的，在windows环境下，你可以在开始菜单中找到. –第一次启动IDLE时，会显示“三个大于号”提示符(&gt;&gt;&gt;)，可以在这里输入代码。shell在得到你的代码后会立即执行，并在屏幕上显示生成的结果。与交互模式下的运行方式一样： 使用文本编辑器选择IDLE里的新建选项打开我们的Python自带的文本编辑器。 请注意，绝对不能用Word和Windows自带的记事本。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python简介(了解)]]></title>
    <url>%2F2018%2F06%2F05%2Fpython%2Fpython%E4%B8%8A%2F0Python%E7%AE%80%E4%BB%8B(%E4%BA%86%E8%A7%A3)%2F</url>
    <content type="text"><![CDATA[Python简介（了解）Python是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL协议。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。 排行：7月20日，IEEE发布2017年编程语言排行榜：Python高居首位。 设计定位:Python的设计哲学是“优雅”、“明确”、“简单”。“总是有多种方法来做同一件事”通常是难以忍受的。Python的哲学是“用一种方法，最好是只有一种方法来做一件事”。由于这种设计观念的差异，Python源代码通常被认为比Perl具备更好的可读性，并且能够支撑大规模的软件开发。 Python更新:开发人员尽量避开不成熟或者不重要的优化。一些针对非重要部位的加快运行速度的补丁通常不会被合并到Python内。所以很多人认为Python很慢。不过，根据二八定律，大多数程序对速度要求不高。在某些对运行速度要求很高的情况，Python设计师倾向于使用JIT技术，或者用使用C/C++语言改写这部分程序。可用的JIT技术是PyPy。 执行:Python在执行时，首先会将.py文件中的源代码编译成Python的字节码，然后再由 Python虚拟机 来执行这些编译好的字节码。这种机制的基本思想跟Java，.NET是一致的。然而不同的是，Python的虚拟机是一种更高级的虚拟机。这里的高级并不是通常意义上的高级，不是说比Java或.NET的功能更强大，而是和Java 或.NET相比，Python的虚拟机距离真实机器的距离更远。或者可以认为Python的虚拟机是一种抽象层次更高的虚拟机。基于C的Python编译出的字节码文件，通常是.pyc格式。除此之外，Python还可以以交互模式运行，比如主流操作系统Unix/Linux、Mac、Windows都可以直接在命令模式下直接运行Python交互环境。直接下达操作指令即可实现交互操作。 优点简单：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样。它使你能够专注于解决问题而不是去搞明白语言本身。 免费、开源：使用者可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。可移植性：这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、PalmOS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE、PocketPC、Symbian以及Google基于linux开发的android平台。可扩展性：如果需要一段关键代码运行得更快或者希望某些算法不公开，可以部分程序用C或C++编写，然后在Python程序中使用它们。规范的代码：Python采用强制缩进的方式使得代码具有较好可读性。而Python语言写的程序不需要编译成二进制代码。 缺点⑴运行速度。但是如果有速度要求的话，可以用C/C++改写关键部分吧。 ⑵python的开源性使Python语言不能加密。关于不能加密这点，作者想说，在这个时代，大家的时间辣么宝贵，才有那闲功夫去破解你的软件，洗洗睡吧 ⑶构架选择太多。不过这也从另一个侧面说明，python比较优秀，吸引的人才多，项目也多。 Python应用场景Web应用开发 Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。 操作系统管理、服务器运维的自动化脚本 在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。 科学计算 NumPy,SciPy,Matplotlib可以让Python程序员编写科学计算程序。 桌面软件 PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。 服务器软件（网络软件） Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。 游戏 很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。 构思实现，产品早期原型和迭代 YouTube、Google、Yahoo!、NASA都在内部大量地使用Python。]]></content>
      <categories>
        <category>python基础编程</category>
      </categories>
      <tags>
        <tag>python基础编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们中间有鬼]]></title>
    <url>%2F2018%2F05%2F19%2F%E4%B8%8E%E4%BA%BA%E7%9B%B8%E5%A4%84%2F0%E6%88%BF%E9%97%B4%E9%87%8C%E6%9C%89%E5%A4%B4%E5%A4%A7%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[这是很多年前的事儿了，还是我初中的时候的事情。记得当时上体育课，上课铃已经打响了。我在教室里急急忙忙的冲了出去，路过中间的一个课桌时，衣服刮在了桌子上，横冲直撞的也把桌子带倒了，一个玻璃水杯也摔碎了， 问题是，我并不知道该怎样打造这个家具。我善于按照计划开展行动，但拙于直接在行动中摸索。这件事情并没有既定规划，我试着思考怎么做，但毫无结果。所以，我就把这事儿搁置了好几个星期，期待着解决之道会在脑海中慢慢浮现出来，然后我就知道应该怎么去做了。 但一两个星期之后，什么都没有改变，事情毫无进展。“女儿的家具”被我搁置了一周又一周、一个月又一个月——因为我被难住了。当我对什么事情束手无策的时候，我的默认做法就是拖延，而不是一鼓作气去解决它。 每次萨拉跟我说话的时候，我都小心翼翼地回避这个话题。我不想让她失望，也不想承认自己的无能。我们从来不聊这事儿，她也不知道究竟是怎么了。我猜想她要么对我很生气，要么对我很失望。但我没有问她，所以也不确定——我想，我其实是不敢去问。 我终于意识到，这样的状态在我们中间形成了一道彼此心照不宣的隔阂。在这个世界上，我的女儿是我最愿意与之聊天的人之一，我希望我们父女之间亲密有爱。但是，我的沉默筑造了一堵无声的墙，两年来，这堵墙越来越高。 当我意识到发生了什么，就马上和女儿说了我的感受，并向她道歉，希望尽我所能去化解自己造成的隔阂。 我说这些的时候，她回答说：“是的，房间里有只大象。” “房间里有头大象”用来形容某些显而易见的事情正在发生，可所有人都避而不谈，而且假装什么都没发生。 我的脑海中浮现出了一个场景：我坐在客厅一端，我的女儿坐在对面的另一端，我们从大象腿之间的缝隙里互望，试着说话。那头大象几乎塞满了整个房间，气味难闻，而且非常聒噪，但是我们都不提它。 一旦我们承认了它，我们就会想：这么一个庞然大物是怎么进入房间的？跟大象比起来，门这么小，根本不可能让它通过！ 听着似曾相识？在你的生命中是否也有人与你分享着“一头大象”——你们对某些事儿心知肚明，却没人愿意提及？没人愿意谈是因为提起来会很不舒服，还会惹得人们心烦意乱。大象待在那儿的时间越长，人们就越难开口。但是它又扎眼又难闻，妨碍着人与人之间的真诚交流。 所以，那个大家伙当初是怎么进门儿的？ 在它还小的时候进来的。 如果这头大象刚刚进来的时候我们就坦诚交流，就能轻轻松松地将它引出门去。但是当我们坐视不管，任由它留下来，日复一日，小象不断长大，再处理起来就麻烦多了。一旦它长成庞然大物，我们可能需要拆房子，请求专业协助才能处理它。 当我最终向女儿承认了“那头大象”，她说：“如果你早点儿告诉我你做不出来，我们可以花上一天的时间好好商量商量，直到我们找到解决办法。”那想必会是我们父女一起度过的非常美好的一天。我们可以去咖啡馆喝杯咖啡，也可以一起去逛五金店或者木材市场。 我爱我的女儿，而且我很开心我们一起解决了问题，她很高兴我做好了那件“家具”。我们家里再也没有“大象”的臭味儿了。 明白了吗？我们一定要提防房间里出现小象，如果你放任它们待在房间里，它们真的会长得很大、很大。“房间里有头大象”用来形容某些显而易见的事情正在发生，可所有人都避而不谈，而且假装什么都没发生。]]></content>
      <categories>
        <category>与人相处</category>
      </categories>
      <tags>
        <tag>与人相处</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F05%2F19%2F%E6%97%A5%E8%AE%B0%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[从上大学开始就想着有一个属于自己的个人网站，可以在上面记录下自己的学习历程。到今天，这才实现了我这个想法。 想起了大一时的一腔热血，一头扎进了各种快速建站，结果在服务器的价格与域名备案上退缩了，想起来也是好笑。不管怎样，今天，是一个开心的日子。 每一个不曾起舞的日子都是对生命的辜负 加油，越努力，越幸运！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
</search>
